#Lab:Console and Cloud Shell

##Objectives:

In this lab, you learn how to perform the following tasks:

 -Get access to Google Cloud.

 -Create a Cloud Storage bucket using the Cloud Console.

 -Create a Cloud Storage bucket using Cloud Shell.

 -Become familiar with Cloud Shell features.

##Steps:

1. Create a bucket using the Cloud Console

       gsutil mb gs://<BUCKET_NAME>


2. Access Cloud Shell
  -In this section, you explore Cloud Shell and some of its features.

    Cloud shell provides the following:

     -Temporary Compute Engine VM
     -Command-line access to the instance via a browser
     -5 GB of persistent disk storage ($HOME dir)
     -Pre-installed Cloud SDK and other tools
     -gcloud: for working with Google Compute Engine and many Google Cloud services
     -gsutil: for working with Cloud Storage
     -kubectl: for working with Google Container Engine and Kubernetes
     -bq: for working with BigQuery
     -Language support for Java, Go, Python, Node.js, PHP, and Ruby
     -Web preview functionality
     -Built-in authorization for access to resources and instances
     -After 1 hour of inactivity, the Cloud Shell instance is recycled. Only the /home directory persists. Any changes made to the system configuration, including            environment variables, are lost between sessions.

   -Open Cloud Shell and explore features

      -Minimize/Restore: The first one minimize and restores the window, giving you full access to the Cloud Console without closing Cloud Shell.

      -Open in new window: Having Cloud Shell at the bottom of the Cloud Console is useful when you are issuing individual commands. However, sometimes you will be            editing files or want to see the full output of a command. For these uses, this icon pops the Cloud Shell out into a full-sized terminal window.

      -Close terminal: This icon closes Cloud Shell. Every time you close Cloud Shell, the virtual machine is recycled and all machine context is lost.

      -Close Cloud Shell now.


3. Create a bucket using Cloud Shell

    -Use the gsutil command to create another bucket. Replace <BUCKET_NAME> with a globally unique name (you can append a 2 to the globally unique bucket name you           used previously):

       gsutil mb gs://<BUCKET_NAME>

4. Explore more Cloud Shell features

    -Upload a file with this comand 

       gsutil cp [MY_FILE] gs://[BUCKET_NAME]


    -Close all the Cloud Shell sessions.

5. Create a persistent state in Cloud Shell

    -Identify available regions by running this command

       gcloud compute regions list

    -Select a region from the list and note the value. 

    -Create an environment variable and replace [YOUR_REGION] with the region you selected in the previous step:

       INFRACLASS_REGION=[YOUR_REGION]

    -Verify it with echo:

       echo $INFRACLASS_REGION


    -Every time you close Cloud Shell and reopen it, a new VM is allocated, and the environment variable you just set disappears. In the next steps, you create a file       to set the value so that you won't have to enter the command each time Cloud Shell is cycled.

  1. Append the environment variable to a file

      -Create a subdirectory for materials used in this class:

         mkdir infraclass

      -Create a file called config in the infraclass directory:

         touch infraclass/config

      -Append the value of your Region environment variable to the config file:

         echo INFRACLASS_REGION=$INFRACLASS_REGION >> ~/infraclass/config

      -Create a second environment variable for your Project ID, replacing [YOUR_PROJECT_ID] with your Project ID. You can find the project ID on the Cloud Console            Home page.

         INFRACLASS_PROJECT_ID=[YOUR_PROJECT_ID]

      -Append the value of your Project ID environment variable to the config file:

         echo INFRACLASS_PROJECT_ID=$INFRACLASS_PROJECT_ID >> ~/infraclass/config

      -Use the source command to set the environment variables, and use the echo command to verify that the project variable was set:

         source infraclass/config
         echo $INFRACLASS_PROJECT_ID


      -In the next step you will modify the .profile file so that the source command is issued automatically any time a terminal to Cloud Shell is opened.
 
      -Close and re-open Cloud Shell. Then issue the echo command again:

         echo $INFRACLASS_PROJECT_ID

      -Result:There will be no output because the environment variable no longer exists.

    -Modify the bash profile and create persistence

    -Edit the shell profile with the following command:

       nano .profile

    -Add the following line to the end of the file:

       source infraclass/config

    -Press Ctrl+O, ENTER to save the file, and then press Ctrl+X to exit nano.

    -Close and then re-open Cloud Shell to cycle the VM.

    -Use the echo command to verify that the variable is still set:

       echo $INFRACLASS_PROJECT_ID

    -If you ever find your Cloud Shell environment corrupted, you can find instructions on resetting it here:

       Resetting Cloud Shell

    -Reslut:This will cause everything in your Cloud Shell environment to be set back to its original default state.